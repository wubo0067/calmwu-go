// Code generated by protoc-gen-go.
// source: kp_proto.proto
// DO NOT EDIT!

/*
Package kp_proto is a generated protocol buffer package.

It is generated from these files:
	kp_proto.proto

It has these top-level messages:
	A2SRegisterReq
	S2ARegisterRes
	RealServerInfo
	S2AAddListenerReq
	A2SAddListenerRes
	S2ADelListenerReq
	A2SDelListenerRes
	S2AModListenerReq
	A2SModListenerRes
	S2ABindListenerWithRSReq
	A2SBindListenerWithRSRes
	S2AUnBindListenerWithRsReq
	A2SUnBindListenerWithRSRes
	RSStatus
	A2SRSStatusNotify
	HeartBeat
	S2AReloadReq
	A2SReloadRes
	A2SNetSpeedMeasureNtf
	NetStatisticsInfo
	A2SNetStatisticsNtf
	KPMessage
*/
package kp_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
//import _ "google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KPProtoCmd int32

const (
	KPProtoCmd_E_A2S_REGISTER_REQ                KPProtoCmd = 0
	KPProtoCmd_E_S2A_REGISTER_RES                KPProtoCmd = 1
	KPProtoCmd_E_S2A_ADD_LISTENER_REQ            KPProtoCmd = 2
	KPProtoCmd_E_A2S_ADD_LISTENER_RES            KPProtoCmd = 3
	KPProtoCmd_E_S2A_DEL_LISTENER_REQ            KPProtoCmd = 4
	KPProtoCmd_E_A2S_DEL_LISTENER_RES            KPProtoCmd = 5
	KPProtoCmd_E_S2A_BIND_LISTENER_WITH_RS_REQ   KPProtoCmd = 6
	KPProtoCmd_E_A2S_BIND_LISTENER_WITH_RS_RES   KPProtoCmd = 7
	KPProtoCmd_E_S2A_UNBIND_LISTENER_WITH_RS_REQ KPProtoCmd = 8
	KPProtoCmd_E_A2S_UNBIND_LISTENER_WITH_RS_RES KPProtoCmd = 9
	KPProtoCmd_E_A2S_RS_STATUS_NOTIFY            KPProtoCmd = 10
	KPProtoCmd_E_A2S_HEARTBEAT_REQ               KPProtoCmd = 12
	KPProtoCmd_E_S2A_HEARTBEAT_RES               KPProtoCmd = 13
	KPProtoCmd_E_S2A_KPRELOAD_REQ                KPProtoCmd = 14
	KPProtoCmd_E_A2S_KPRELOAD_RES                KPProtoCmd = 15
	KPProtoCmd_E_A2S_NETSPEEDMEASURE_NTF         KPProtoCmd = 16
	KPProtoCmd_E_A2S_NETSTATISTICS_NTF           KPProtoCmd = 17
	KPProtoCmd_E_S2A_MOD_LISTENER_REQ            KPProtoCmd = 18
	KPProtoCmd_E_A2S_MOD_LISTENER_RES            KPProtoCmd = 19
)

var KPProtoCmd_name = map[int32]string{
	0:  "E_A2S_REGISTER_REQ",
	1:  "E_S2A_REGISTER_RES",
	2:  "E_S2A_ADD_LISTENER_REQ",
	3:  "E_A2S_ADD_LISTENER_RES",
	4:  "E_S2A_DEL_LISTENER_REQ",
	5:  "E_A2S_DEL_LISTENER_RES",
	6:  "E_S2A_BIND_LISTENER_WITH_RS_REQ",
	7:  "E_A2S_BIND_LISTENER_WITH_RS_RES",
	8:  "E_S2A_UNBIND_LISTENER_WITH_RS_REQ",
	9:  "E_A2S_UNBIND_LISTENER_WITH_RS_RES",
	10: "E_A2S_RS_STATUS_NOTIFY",
	12: "E_A2S_HEARTBEAT_REQ",
	13: "E_S2A_HEARTBEAT_RES",
	14: "E_S2A_KPRELOAD_REQ",
	15: "E_A2S_KPRELOAD_RES",
	16: "E_A2S_NETSPEEDMEASURE_NTF",
	17: "E_A2S_NETSTATISTICS_NTF",
	18: "E_S2A_MOD_LISTENER_REQ",
	19: "E_A2S_MOD_LISTENER_RES",
}
var KPProtoCmd_value = map[string]int32{
	"E_A2S_REGISTER_REQ":                0,
	"E_S2A_REGISTER_RES":                1,
	"E_S2A_ADD_LISTENER_REQ":            2,
	"E_A2S_ADD_LISTENER_RES":            3,
	"E_S2A_DEL_LISTENER_REQ":            4,
	"E_A2S_DEL_LISTENER_RES":            5,
	"E_S2A_BIND_LISTENER_WITH_RS_REQ":   6,
	"E_A2S_BIND_LISTENER_WITH_RS_RES":   7,
	"E_S2A_UNBIND_LISTENER_WITH_RS_REQ": 8,
	"E_A2S_UNBIND_LISTENER_WITH_RS_RES": 9,
	"E_A2S_RS_STATUS_NOTIFY":            10,
	"E_A2S_HEARTBEAT_REQ":               12,
	"E_S2A_HEARTBEAT_RES":               13,
	"E_S2A_KPRELOAD_REQ":                14,
	"E_A2S_KPRELOAD_RES":                15,
	"E_A2S_NETSPEEDMEASURE_NTF":         16,
	"E_A2S_NETSTATISTICS_NTF":           17,
	"E_S2A_MOD_LISTENER_REQ":            18,
	"E_A2S_MOD_LISTENER_RES":            19,
}

func (x KPProtoCmd) Enum() *KPProtoCmd {
	p := new(KPProtoCmd)
	*p = x
	return p
}
func (x KPProtoCmd) String() string {
	return proto.EnumName(KPProtoCmd_name, int32(x))
}
func (x *KPProtoCmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KPProtoCmd_value, data, "KPProtoCmd")
	if err != nil {
		return err
	}
	*x = KPProtoCmd(value)
	return nil
}
func (KPProtoCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ---------------------------------------------------------------------------
type KPErrorCode int32

const (
	KPErrorCode_E_KPERR_OK                                     KPErrorCode = 0
	KPErrorCode_E_KPERR_FAILED_PROXYID_INVALID                 KPErrorCode = 1
	KPErrorCode_E_KPERR_FAILED_VRRPROUTERID_INVALID            KPErrorCode = 2
	KPErrorCode_E_KPERR_FAILED_ADDVIRTUALSVR_ALREADYEXISTS     KPErrorCode = 3
	KPErrorCode_E_KPERR_FAILED_DELVIRTUALSVR_NOTEXISTS         KPErrorCode = 4
	KPErrorCode_E_KPERR_FAILED_BINDRS_VIRTUALSVRNOTEXISTS      KPErrorCode = 5
	KPErrorCode_E_KPERR_FAILED_UNBINDRS_VIRTUALSVRNOTEXISTS    KPErrorCode = 6
	KPErrorCode_E_KPERR_FAILED_RELOAD                          KPErrorCode = 7
	KPErrorCode_E_KPERR_FAILED_INSIDERROR                      KPErrorCode = 8
	KPErrorCode_E_KPERR_FAILED_REGISTER_LOCALIPNOTEXISTS       KPErrorCode = 9
	KPErrorCode_E_KPERR_FAILED_REGISTER_DATABASEERROR          KPErrorCode = 10
	KPErrorCode_E_KPERR_FAILED_UNMARSHALEFAILED                KPErrorCode = 11
	KPErrorCode_E_KPERR_FAILED_MODLISTENER_VIRTUALSVRNOTEXISTS KPErrorCode = 12
)

var KPErrorCode_name = map[int32]string{
	0:  "E_KPERR_OK",
	1:  "E_KPERR_FAILED_PROXYID_INVALID",
	2:  "E_KPERR_FAILED_VRRPROUTERID_INVALID",
	3:  "E_KPERR_FAILED_ADDVIRTUALSVR_ALREADYEXISTS",
	4:  "E_KPERR_FAILED_DELVIRTUALSVR_NOTEXISTS",
	5:  "E_KPERR_FAILED_BINDRS_VIRTUALSVRNOTEXISTS",
	6:  "E_KPERR_FAILED_UNBINDRS_VIRTUALSVRNOTEXISTS",
	7:  "E_KPERR_FAILED_RELOAD",
	8:  "E_KPERR_FAILED_INSIDERROR",
	9:  "E_KPERR_FAILED_REGISTER_LOCALIPNOTEXISTS",
	10: "E_KPERR_FAILED_REGISTER_DATABASEERROR",
	11: "E_KPERR_FAILED_UNMARSHALEFAILED",
	12: "E_KPERR_FAILED_MODLISTENER_VIRTUALSVRNOTEXISTS",
}
var KPErrorCode_value = map[string]int32{
	"E_KPERR_OK":                                     0,
	"E_KPERR_FAILED_PROXYID_INVALID":                 1,
	"E_KPERR_FAILED_VRRPROUTERID_INVALID":            2,
	"E_KPERR_FAILED_ADDVIRTUALSVR_ALREADYEXISTS":     3,
	"E_KPERR_FAILED_DELVIRTUALSVR_NOTEXISTS":         4,
	"E_KPERR_FAILED_BINDRS_VIRTUALSVRNOTEXISTS":      5,
	"E_KPERR_FAILED_UNBINDRS_VIRTUALSVRNOTEXISTS":    6,
	"E_KPERR_FAILED_RELOAD":                          7,
	"E_KPERR_FAILED_INSIDERROR":                      8,
	"E_KPERR_FAILED_REGISTER_LOCALIPNOTEXISTS":       9,
	"E_KPERR_FAILED_REGISTER_DATABASEERROR":          10,
	"E_KPERR_FAILED_UNMARSHALEFAILED":                11,
	"E_KPERR_FAILED_MODLISTENER_VIRTUALSVRNOTEXISTS": 12,
}

func (x KPErrorCode) Enum() *KPErrorCode {
	p := new(KPErrorCode)
	*p = x
	return p
}
func (x KPErrorCode) String() string {
	return proto.EnumName(KPErrorCode_name, int32(x))
}
func (x *KPErrorCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KPErrorCode_value, data, "KPErrorCode")
	if err != nil {
		return err
	}
	*x = KPErrorCode(value)
	return nil
}
func (KPErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ---------------------------------------------------------------------------
type LinkNodeType int32

const (
	LinkNodeType_E_LINKNODE_FRONTEND     LinkNodeType = 0
	LinkNodeType_E_LINKNODE_BACKEND      LinkNodeType = 1
	LinkNodeType_E_LINKNODE_INTERMEDIATE LinkNodeType = 2
)

var LinkNodeType_name = map[int32]string{
	0: "E_LINKNODE_FRONTEND",
	1: "E_LINKNODE_BACKEND",
	2: "E_LINKNODE_INTERMEDIATE",
}
var LinkNodeType_value = map[string]int32{
	"E_LINKNODE_FRONTEND":     0,
	"E_LINKNODE_BACKEND":      1,
	"E_LINKNODE_INTERMEDIATE": 2,
}

func (x LinkNodeType) Enum() *LinkNodeType {
	p := new(LinkNodeType)
	*p = x
	return p
}
func (x LinkNodeType) String() string {
	return proto.EnumName(LinkNodeType_name, int32(x))
}
func (x *LinkNodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LinkNodeType_value, data, "LinkNodeType")
	if err != nil {
		return err
	}
	*x = LinkNodeType(value)
	return nil
}
func (LinkNodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ---------------------------------------------------------------------------
type A2SRegisterReq struct {
	AgentLocalip     *string `protobuf:"bytes,1,req,name=agent_localip" json:"agent_localip,omitempty"`
	DhKeyAgent       *string `protobuf:"bytes,2,req,name=dh_key_agent" json:"dh_key_agent,omitempty"`
	IsMaster         *bool   `protobuf:"varint,3,req,name=is_master" json:"is_master,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *A2SRegisterReq) Reset()                    { *m = A2SRegisterReq{} }
func (m *A2SRegisterReq) String() string            { return proto.CompactTextString(m) }
func (*A2SRegisterReq) ProtoMessage()               {}
func (*A2SRegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *A2SRegisterReq) GetAgentLocalip() string {
	if m != nil && m.AgentLocalip != nil {
		return *m.AgentLocalip
	}
	return ""
}

func (m *A2SRegisterReq) GetDhKeyAgent() string {
	if m != nil && m.DhKeyAgent != nil {
		return *m.DhKeyAgent
	}
	return ""
}

func (m *A2SRegisterReq) GetIsMaster() bool {
	if m != nil && m.IsMaster != nil {
		return *m.IsMaster
	}
	return false
}

type S2ARegisterRes struct {
	Result           *KPErrorCode  `protobuf:"varint,1,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	ProxyId          *string       `protobuf:"bytes,2,req,name=proxy_id" json:"proxy_id,omitempty"`
	VrrpRouterid     *int32        `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	VrrpItfname      *string       `protobuf:"bytes,4,req,name=vrrp_itfname" json:"vrrp_itfname,omitempty"`
	KpLocalip        *string       `protobuf:"bytes,5,req,name=kp_localip" json:"kp_localip,omitempty"`
	KpVirtualIp      *string       `protobuf:"bytes,6,req,name=kp_virtual_ip" json:"kp_virtual_ip,omitempty"`
	DhKeyServer      *string       `protobuf:"bytes,7,req,name=dh_key_server" json:"dh_key_server,omitempty"`
	LinkNodeId       *string       `protobuf:"bytes,8,req,name=link_node_id" json:"link_node_id,omitempty"`
	LinkNodeType     *LinkNodeType `protobuf:"varint,9,req,name=link_node_type,enum=kp_proto.LinkNodeType" json:"link_node_type,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *S2ARegisterRes) Reset()                    { *m = S2ARegisterRes{} }
func (m *S2ARegisterRes) String() string            { return proto.CompactTextString(m) }
func (*S2ARegisterRes) ProtoMessage()               {}
func (*S2ARegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *S2ARegisterRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

func (m *S2ARegisterRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2ARegisterRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2ARegisterRes) GetVrrpItfname() string {
	if m != nil && m.VrrpItfname != nil {
		return *m.VrrpItfname
	}
	return ""
}

func (m *S2ARegisterRes) GetKpLocalip() string {
	if m != nil && m.KpLocalip != nil {
		return *m.KpLocalip
	}
	return ""
}

func (m *S2ARegisterRes) GetKpVirtualIp() string {
	if m != nil && m.KpVirtualIp != nil {
		return *m.KpVirtualIp
	}
	return ""
}

func (m *S2ARegisterRes) GetDhKeyServer() string {
	if m != nil && m.DhKeyServer != nil {
		return *m.DhKeyServer
	}
	return ""
}

func (m *S2ARegisterRes) GetLinkNodeId() string {
	if m != nil && m.LinkNodeId != nil {
		return *m.LinkNodeId
	}
	return ""
}

func (m *S2ARegisterRes) GetLinkNodeType() LinkNodeType {
	if m != nil && m.LinkNodeType != nil {
		return *m.LinkNodeType
	}
	return LinkNodeType_E_LINKNODE_FRONTEND
}

// 添加监听器------------------------------------------------------------------
type RealServerInfo struct {
	Weight           *int32  `protobuf:"varint,1,req,name=weight" json:"weight,omitempty"`
	Ip               *string `protobuf:"bytes,2,req,name=ip" json:"ip,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RealServerInfo) Reset()                    { *m = RealServerInfo{} }
func (m *RealServerInfo) String() string            { return proto.CompactTextString(m) }
func (*RealServerInfo) ProtoMessage()               {}
func (*RealServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RealServerInfo) GetWeight() int32 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

func (m *RealServerInfo) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

type S2AAddListenerReq struct {
	ProxyId         *string `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId          *string `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid    *int32  `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId      *string `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName *string `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort    *int32  `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Scheduler       *string `protobuf:"bytes,7,req,name=scheduler" json:"scheduler,omitempty"`
	DelayLoop       *int32  `protobuf:"varint,8,req,name=delay_loop" json:"delay_loop,omitempty"`
	// 这时前端代理机要配置后端的代理机的rs，最后一个代理机数据为空
	ProxyRealsvrLst  []*RealServerInfo `protobuf:"bytes,11,rep,name=proxy_realsvr_lst" json:"proxy_realsvr_lst,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *S2AAddListenerReq) Reset()                    { *m = S2AAddListenerReq{} }
func (m *S2AAddListenerReq) String() string            { return proto.CompactTextString(m) }
func (*S2AAddListenerReq) ProtoMessage()               {}
func (*S2AAddListenerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *S2AAddListenerReq) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2AAddListenerReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *S2AAddListenerReq) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2AAddListenerReq) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *S2AAddListenerReq) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *S2AAddListenerReq) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *S2AAddListenerReq) GetScheduler() string {
	if m != nil && m.Scheduler != nil {
		return *m.Scheduler
	}
	return ""
}

func (m *S2AAddListenerReq) GetDelayLoop() int32 {
	if m != nil && m.DelayLoop != nil {
		return *m.DelayLoop
	}
	return 0
}

func (m *S2AAddListenerReq) GetProxyRealsvrLst() []*RealServerInfo {
	if m != nil {
		return m.ProxyRealsvrLst
	}
	return nil
}

type A2SAddListenerRes struct {
	ProxyId          *string      `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string      `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32       `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string      `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string      `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32       `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Result           *KPErrorCode `protobuf:"varint,7,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *A2SAddListenerRes) Reset()                    { *m = A2SAddListenerRes{} }
func (m *A2SAddListenerRes) String() string            { return proto.CompactTextString(m) }
func (*A2SAddListenerRes) ProtoMessage()               {}
func (*A2SAddListenerRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *A2SAddListenerRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SAddListenerRes) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *A2SAddListenerRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SAddListenerRes) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *A2SAddListenerRes) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *A2SAddListenerRes) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *A2SAddListenerRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

// 删除监听器------------------------------------------------------------------
type S2ADelListenerReq struct {
	ProxyId          *string `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32  `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32  `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *S2ADelListenerReq) Reset()                    { *m = S2ADelListenerReq{} }
func (m *S2ADelListenerReq) String() string            { return proto.CompactTextString(m) }
func (*S2ADelListenerReq) ProtoMessage()               {}
func (*S2ADelListenerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *S2ADelListenerReq) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2ADelListenerReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *S2ADelListenerReq) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2ADelListenerReq) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *S2ADelListenerReq) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *S2ADelListenerReq) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

type A2SDelListenerRes struct {
	ProxyId          *string      `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string      `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32       `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string      `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string      `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32       `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Result           *KPErrorCode `protobuf:"varint,7,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *A2SDelListenerRes) Reset()                    { *m = A2SDelListenerRes{} }
func (m *A2SDelListenerRes) String() string            { return proto.CompactTextString(m) }
func (*A2SDelListenerRes) ProtoMessage()               {}
func (*A2SDelListenerRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *A2SDelListenerRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SDelListenerRes) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *A2SDelListenerRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SDelListenerRes) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *A2SDelListenerRes) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *A2SDelListenerRes) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *A2SDelListenerRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

// 修改监听器设置----------------------------------------------------------------
type S2AModListenerReq struct {
	ProxyId          *string `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32  `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32  `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Scheduler        *string `protobuf:"bytes,7,req,name=scheduler" json:"scheduler,omitempty"`
	DelayLoop        *int32  `protobuf:"varint,8,req,name=delay_loop" json:"delay_loop,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *S2AModListenerReq) Reset()                    { *m = S2AModListenerReq{} }
func (m *S2AModListenerReq) String() string            { return proto.CompactTextString(m) }
func (*S2AModListenerReq) ProtoMessage()               {}
func (*S2AModListenerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *S2AModListenerReq) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2AModListenerReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *S2AModListenerReq) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2AModListenerReq) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *S2AModListenerReq) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *S2AModListenerReq) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *S2AModListenerReq) GetScheduler() string {
	if m != nil && m.Scheduler != nil {
		return *m.Scheduler
	}
	return ""
}

func (m *S2AModListenerReq) GetDelayLoop() int32 {
	if m != nil && m.DelayLoop != nil {
		return *m.DelayLoop
	}
	return 0
}

type A2SModListenerRes struct {
	ProxyId          *string      `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string      `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32       `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string      `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string      `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32       `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Result           *KPErrorCode `protobuf:"varint,7,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *A2SModListenerRes) Reset()                    { *m = A2SModListenerRes{} }
func (m *A2SModListenerRes) String() string            { return proto.CompactTextString(m) }
func (*A2SModListenerRes) ProtoMessage()               {}
func (*A2SModListenerRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *A2SModListenerRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SModListenerRes) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *A2SModListenerRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SModListenerRes) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *A2SModListenerRes) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *A2SModListenerRes) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *A2SModListenerRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

// 监听器和rs绑定----------------------------------------------------------------
type S2ABindListenerWithRSReq struct {
	ProxyId          *string           `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string           `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32            `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string           `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string           `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32            `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	RealserverLst    []*RealServerInfo `protobuf:"bytes,7,rep,name=realserver_lst" json:"realserver_lst,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *S2ABindListenerWithRSReq) Reset()                    { *m = S2ABindListenerWithRSReq{} }
func (m *S2ABindListenerWithRSReq) String() string            { return proto.CompactTextString(m) }
func (*S2ABindListenerWithRSReq) ProtoMessage()               {}
func (*S2ABindListenerWithRSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *S2ABindListenerWithRSReq) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2ABindListenerWithRSReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *S2ABindListenerWithRSReq) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2ABindListenerWithRSReq) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *S2ABindListenerWithRSReq) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *S2ABindListenerWithRSReq) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *S2ABindListenerWithRSReq) GetRealserverLst() []*RealServerInfo {
	if m != nil {
		return m.RealserverLst
	}
	return nil
}

type A2SBindListenerWithRSRes struct {
	ProxyId          *string      `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string      `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32       `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string      `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string      `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32       `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Result           *KPErrorCode `protobuf:"varint,7,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *A2SBindListenerWithRSRes) Reset()                    { *m = A2SBindListenerWithRSRes{} }
func (m *A2SBindListenerWithRSRes) String() string            { return proto.CompactTextString(m) }
func (*A2SBindListenerWithRSRes) ProtoMessage()               {}
func (*A2SBindListenerWithRSRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *A2SBindListenerWithRSRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SBindListenerWithRSRes) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *A2SBindListenerWithRSRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SBindListenerWithRSRes) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *A2SBindListenerWithRSRes) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *A2SBindListenerWithRSRes) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *A2SBindListenerWithRSRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

// 监听器和rs解绑----------------------------------------------------------------
type S2AUnBindListenerWithRsReq struct {
	ProxyId          *string  `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string  `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32   `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string  `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string  `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32   `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	RealserverLst    []string `protobuf:"bytes,7,rep,name=realserver_lst" json:"realserver_lst,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *S2AUnBindListenerWithRsReq) Reset()                    { *m = S2AUnBindListenerWithRsReq{} }
func (m *S2AUnBindListenerWithRsReq) String() string            { return proto.CompactTextString(m) }
func (*S2AUnBindListenerWithRsReq) ProtoMessage()               {}
func (*S2AUnBindListenerWithRsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *S2AUnBindListenerWithRsReq) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2AUnBindListenerWithRsReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *S2AUnBindListenerWithRsReq) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2AUnBindListenerWithRsReq) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *S2AUnBindListenerWithRsReq) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *S2AUnBindListenerWithRsReq) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *S2AUnBindListenerWithRsReq) GetRealserverLst() []string {
	if m != nil {
		return m.RealserverLst
	}
	return nil
}

type A2SUnBindListenerWithRSRes struct {
	ProxyId          *string      `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	TaskId           *string      `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	VrrpRouterid     *int32       `protobuf:"varint,3,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	ListenerId       *string      `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	NetProtocolName  *string      `protobuf:"bytes,5,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerPort     *int32       `protobuf:"varint,6,req,name=listener_port" json:"listener_port,omitempty"`
	Result           *KPErrorCode `protobuf:"varint,7,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *A2SUnBindListenerWithRSRes) Reset()                    { *m = A2SUnBindListenerWithRSRes{} }
func (m *A2SUnBindListenerWithRSRes) String() string            { return proto.CompactTextString(m) }
func (*A2SUnBindListenerWithRSRes) ProtoMessage()               {}
func (*A2SUnBindListenerWithRSRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *A2SUnBindListenerWithRSRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SUnBindListenerWithRSRes) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *A2SUnBindListenerWithRSRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SUnBindListenerWithRSRes) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *A2SUnBindListenerWithRSRes) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *A2SUnBindListenerWithRSRes) GetListenerPort() int32 {
	if m != nil && m.ListenerPort != nil {
		return *m.ListenerPort
	}
	return 0
}

func (m *A2SUnBindListenerWithRSRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

// ---------------------------------------------------------------------------
type RSStatus struct {
	RsPort           *int32  `protobuf:"varint,1,req,name=rs_port" json:"rs_port,omitempty"`
	RsIp             *string `protobuf:"bytes,2,req,name=rs_ip" json:"rs_ip,omitempty"`
	NetProtocolName  *string `protobuf:"bytes,3,req,name=net_protocol_name" json:"net_protocol_name,omitempty"`
	ListenerId       *string `protobuf:"bytes,4,req,name=listener_id" json:"listener_id,omitempty"`
	Status           *int32  `protobuf:"varint,5,req,name=status" json:"status,omitempty"`
	TimeStamp        *int64  `protobuf:"varint,6,req,name=time_stamp" json:"time_stamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RSStatus) Reset()                    { *m = RSStatus{} }
func (m *RSStatus) String() string            { return proto.CompactTextString(m) }
func (*RSStatus) ProtoMessage()               {}
func (*RSStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RSStatus) GetRsPort() int32 {
	if m != nil && m.RsPort != nil {
		return *m.RsPort
	}
	return 0
}

func (m *RSStatus) GetRsIp() string {
	if m != nil && m.RsIp != nil {
		return *m.RsIp
	}
	return ""
}

func (m *RSStatus) GetNetProtocolName() string {
	if m != nil && m.NetProtocolName != nil {
		return *m.NetProtocolName
	}
	return ""
}

func (m *RSStatus) GetListenerId() string {
	if m != nil && m.ListenerId != nil {
		return *m.ListenerId
	}
	return ""
}

func (m *RSStatus) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

func (m *RSStatus) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

type A2SRSStatusNotify struct {
	ProxyId          *string   `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	VrrpRouterid     *int32    `protobuf:"varint,2,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	StatusInfo       *RSStatus `protobuf:"bytes,3,req,name=status_info" json:"status_info,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *A2SRSStatusNotify) Reset()                    { *m = A2SRSStatusNotify{} }
func (m *A2SRSStatusNotify) String() string            { return proto.CompactTextString(m) }
func (*A2SRSStatusNotify) ProtoMessage()               {}
func (*A2SRSStatusNotify) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *A2SRSStatusNotify) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SRSStatusNotify) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SRSStatusNotify) GetStatusInfo() *RSStatus {
	if m != nil {
		return m.StatusInfo
	}
	return nil
}

// ---------------------------------------------------------------------------
type HeartBeat struct {
	TimeStamp        *int64  `protobuf:"varint,1,req,name=time_stamp" json:"time_stamp,omitempty"`
	FromHost         *string `protobuf:"bytes,2,req,name=from_host" json:"from_host,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HeartBeat) Reset()                    { *m = HeartBeat{} }
func (m *HeartBeat) String() string            { return proto.CompactTextString(m) }
func (*HeartBeat) ProtoMessage()               {}
func (*HeartBeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *HeartBeat) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

func (m *HeartBeat) GetFromHost() string {
	if m != nil && m.FromHost != nil {
		return *m.FromHost
	}
	return ""
}

// reload--------------------------------------------------------------------
type S2AReloadReq struct {
	ProxyId          *string `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	VrrpRouterid     *int32  `protobuf:"varint,2,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	TaskId           *string `protobuf:"bytes,3,req,name=task_id" json:"task_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *S2AReloadReq) Reset()                    { *m = S2AReloadReq{} }
func (m *S2AReloadReq) String() string            { return proto.CompactTextString(m) }
func (*S2AReloadReq) ProtoMessage()               {}
func (*S2AReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *S2AReloadReq) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *S2AReloadReq) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *S2AReloadReq) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

type A2SReloadRes struct {
	ProxyId          *string      `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	VrrpRouterid     *int32       `protobuf:"varint,2,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	Result           *KPErrorCode `protobuf:"varint,3,req,name=result,enum=kp_proto.KPErrorCode" json:"result,omitempty"`
	FailedReason     *string      `protobuf:"bytes,4,opt,name=failed_reason" json:"failed_reason,omitempty"`
	TaskId           *string      `protobuf:"bytes,5,req,name=task_id" json:"task_id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *A2SReloadRes) Reset()                    { *m = A2SReloadRes{} }
func (m *A2SReloadRes) String() string            { return proto.CompactTextString(m) }
func (*A2SReloadRes) ProtoMessage()               {}
func (*A2SReloadRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *A2SReloadRes) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SReloadRes) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SReloadRes) GetResult() KPErrorCode {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return KPErrorCode_E_KPERR_OK
}

func (m *A2SReloadRes) GetFailedReason() string {
	if m != nil && m.FailedReason != nil {
		return *m.FailedReason
	}
	return ""
}

func (m *A2SReloadRes) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

// --------------------------------------------------------------------------
type A2SNetSpeedMeasureNtf struct {
	ProxyId          *string `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	VrrpRouterid     *int32  `protobuf:"varint,2,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	LinkNodeId       *string `protobuf:"bytes,3,req,name=link_node_id" json:"link_node_id,omitempty"`
	Speed            *int32  `protobuf:"varint,4,req,name=speed" json:"speed,omitempty"`
	TimeStamp        *int64  `protobuf:"varint,5,req,name=time_stamp" json:"time_stamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *A2SNetSpeedMeasureNtf) Reset()                    { *m = A2SNetSpeedMeasureNtf{} }
func (m *A2SNetSpeedMeasureNtf) String() string            { return proto.CompactTextString(m) }
func (*A2SNetSpeedMeasureNtf) ProtoMessage()               {}
func (*A2SNetSpeedMeasureNtf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *A2SNetSpeedMeasureNtf) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SNetSpeedMeasureNtf) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SNetSpeedMeasureNtf) GetLinkNodeId() string {
	if m != nil && m.LinkNodeId != nil {
		return *m.LinkNodeId
	}
	return ""
}

func (m *A2SNetSpeedMeasureNtf) GetSpeed() int32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *A2SNetSpeedMeasureNtf) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

type NetStatisticsInfo struct {
	Rxpcks           *uint64 `protobuf:"varint,1,req,name=rxpcks" json:"rxpcks,omitempty"`
	Txpcks           *uint64 `protobuf:"varint,2,req,name=txpcks" json:"txpcks,omitempty"`
	Droppcks         *uint64 `protobuf:"varint,3,req,name=droppcks" json:"droppcks,omitempty"`
	Rxbytes          *uint64 `protobuf:"varint,4,req,name=rxbytes" json:"rxbytes,omitempty"`
	Txbytes          *uint64 `protobuf:"varint,5,req,name=txbytes" json:"txbytes,omitempty"`
	TcpPassiveopens  *uint64 `protobuf:"varint,6,req,name=tcp_passiveopens" json:"tcp_passiveopens,omitempty"`
	TcpCurrestab     *uint64 `protobuf:"varint,7,req,name=tcp_currestab" json:"tcp_currestab,omitempty"`
	TcpInsegs        *uint64 `protobuf:"varint,8,req,name=tcp_insegs" json:"tcp_insegs,omitempty"`
	TcpOutsegs       *uint64 `protobuf:"varint,9,req,name=tcp_outsegs" json:"tcp_outsegs,omitempty"`
	UdpIndatarams    *uint64 `protobuf:"varint,10,req,name=udp_indatarams" json:"udp_indatarams,omitempty"`
	UdpOutdatarams   *uint64 `protobuf:"varint,11,req,name=udp_outdatarams" json:"udp_outdatarams,omitempty"`
	RxbytesS         *uint32 `protobuf:"varint,12,req,name=rxbytes_s" json:"rxbytes_s,omitempty"`
	TxbytesS         *uint32 `protobuf:"varint,13,req,name=txbytes_s" json:"txbytes_s,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetStatisticsInfo) Reset()                    { *m = NetStatisticsInfo{} }
func (m *NetStatisticsInfo) String() string            { return proto.CompactTextString(m) }
func (*NetStatisticsInfo) ProtoMessage()               {}
func (*NetStatisticsInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NetStatisticsInfo) GetRxpcks() uint64 {
	if m != nil && m.Rxpcks != nil {
		return *m.Rxpcks
	}
	return 0
}

func (m *NetStatisticsInfo) GetTxpcks() uint64 {
	if m != nil && m.Txpcks != nil {
		return *m.Txpcks
	}
	return 0
}

func (m *NetStatisticsInfo) GetDroppcks() uint64 {
	if m != nil && m.Droppcks != nil {
		return *m.Droppcks
	}
	return 0
}

func (m *NetStatisticsInfo) GetRxbytes() uint64 {
	if m != nil && m.Rxbytes != nil {
		return *m.Rxbytes
	}
	return 0
}

func (m *NetStatisticsInfo) GetTxbytes() uint64 {
	if m != nil && m.Txbytes != nil {
		return *m.Txbytes
	}
	return 0
}

func (m *NetStatisticsInfo) GetTcpPassiveopens() uint64 {
	if m != nil && m.TcpPassiveopens != nil {
		return *m.TcpPassiveopens
	}
	return 0
}

func (m *NetStatisticsInfo) GetTcpCurrestab() uint64 {
	if m != nil && m.TcpCurrestab != nil {
		return *m.TcpCurrestab
	}
	return 0
}

func (m *NetStatisticsInfo) GetTcpInsegs() uint64 {
	if m != nil && m.TcpInsegs != nil {
		return *m.TcpInsegs
	}
	return 0
}

func (m *NetStatisticsInfo) GetTcpOutsegs() uint64 {
	if m != nil && m.TcpOutsegs != nil {
		return *m.TcpOutsegs
	}
	return 0
}

func (m *NetStatisticsInfo) GetUdpIndatarams() uint64 {
	if m != nil && m.UdpIndatarams != nil {
		return *m.UdpIndatarams
	}
	return 0
}

func (m *NetStatisticsInfo) GetUdpOutdatarams() uint64 {
	if m != nil && m.UdpOutdatarams != nil {
		return *m.UdpOutdatarams
	}
	return 0
}

func (m *NetStatisticsInfo) GetRxbytesS() uint32 {
	if m != nil && m.RxbytesS != nil {
		return *m.RxbytesS
	}
	return 0
}

func (m *NetStatisticsInfo) GetTxbytesS() uint32 {
	if m != nil && m.TxbytesS != nil {
		return *m.TxbytesS
	}
	return 0
}

type A2SNetStatisticsNtf struct {
	ProxyId          *string            `protobuf:"bytes,1,req,name=proxy_id" json:"proxy_id,omitempty"`
	VrrpRouterid     *int32             `protobuf:"varint,2,req,name=vrrp_routerid" json:"vrrp_routerid,omitempty"`
	LinkNodeId       *string            `protobuf:"bytes,3,req,name=link_node_id" json:"link_node_id,omitempty"`
	Netstatis        *NetStatisticsInfo `protobuf:"bytes,4,req,name=netstatis" json:"netstatis,omitempty"`
	TimeStamp        *int64             `protobuf:"varint,5,req,name=time_stamp" json:"time_stamp,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *A2SNetStatisticsNtf) Reset()                    { *m = A2SNetStatisticsNtf{} }
func (m *A2SNetStatisticsNtf) String() string            { return proto.CompactTextString(m) }
func (*A2SNetStatisticsNtf) ProtoMessage()               {}
func (*A2SNetStatisticsNtf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *A2SNetStatisticsNtf) GetProxyId() string {
	if m != nil && m.ProxyId != nil {
		return *m.ProxyId
	}
	return ""
}

func (m *A2SNetStatisticsNtf) GetVrrpRouterid() int32 {
	if m != nil && m.VrrpRouterid != nil {
		return *m.VrrpRouterid
	}
	return 0
}

func (m *A2SNetStatisticsNtf) GetLinkNodeId() string {
	if m != nil && m.LinkNodeId != nil {
		return *m.LinkNodeId
	}
	return ""
}

func (m *A2SNetStatisticsNtf) GetNetstatis() *NetStatisticsInfo {
	if m != nil {
		return m.Netstatis
	}
	return nil
}

func (m *A2SNetStatisticsNtf) GetTimeStamp() int64 {
	if m != nil && m.TimeStamp != nil {
		return *m.TimeStamp
	}
	return 0
}

// ---------------------------------------------------------------------------
type KPMessage struct {
	Cmd                    *KPProtoCmd `protobuf:"varint,1,req,name=cmd,enum=kp_proto.KPProtoCmd" json:"cmd,omitempty"`
	RealMessageMarshaldata []byte      `protobuf:"bytes,2,req,name=real_message_marshaldata" json:"real_message_marshaldata,omitempty"`
	XXX_unrecognized       []byte      `json:"-"`
}

func (m *KPMessage) Reset()                    { *m = KPMessage{} }
func (m *KPMessage) String() string            { return proto.CompactTextString(m) }
func (*KPMessage) ProtoMessage()               {}
func (*KPMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *KPMessage) GetCmd() KPProtoCmd {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return KPProtoCmd_E_A2S_REGISTER_REQ
}

func (m *KPMessage) GetRealMessageMarshaldata() []byte {
	if m != nil {
		return m.RealMessageMarshaldata
	}
	return nil
}

func init() {
	proto.RegisterType((*A2SRegisterReq)(nil), "kp_proto.A2SRegisterReq")
	proto.RegisterType((*S2ARegisterRes)(nil), "kp_proto.S2ARegisterRes")
	proto.RegisterType((*RealServerInfo)(nil), "kp_proto.RealServerInfo")
	proto.RegisterType((*S2AAddListenerReq)(nil), "kp_proto.S2AAddListenerReq")
	proto.RegisterType((*A2SAddListenerRes)(nil), "kp_proto.A2SAddListenerRes")
	proto.RegisterType((*S2ADelListenerReq)(nil), "kp_proto.S2ADelListenerReq")
	proto.RegisterType((*A2SDelListenerRes)(nil), "kp_proto.A2SDelListenerRes")
	proto.RegisterType((*S2AModListenerReq)(nil), "kp_proto.S2AModListenerReq")
	proto.RegisterType((*A2SModListenerRes)(nil), "kp_proto.A2SModListenerRes")
	proto.RegisterType((*S2ABindListenerWithRSReq)(nil), "kp_proto.S2ABindListenerWithRSReq")
	proto.RegisterType((*A2SBindListenerWithRSRes)(nil), "kp_proto.A2SBindListenerWithRSRes")
	proto.RegisterType((*S2AUnBindListenerWithRsReq)(nil), "kp_proto.S2AUnBindListenerWithRsReq")
	proto.RegisterType((*A2SUnBindListenerWithRSRes)(nil), "kp_proto.A2SUnBindListenerWithRSRes")
	proto.RegisterType((*RSStatus)(nil), "kp_proto.RSStatus")
	proto.RegisterType((*A2SRSStatusNotify)(nil), "kp_proto.A2SRSStatusNotify")
	proto.RegisterType((*HeartBeat)(nil), "kp_proto.HeartBeat")
	proto.RegisterType((*S2AReloadReq)(nil), "kp_proto.S2AReloadReq")
	proto.RegisterType((*A2SReloadRes)(nil), "kp_proto.A2SReloadRes")
	proto.RegisterType((*A2SNetSpeedMeasureNtf)(nil), "kp_proto.A2SNetSpeedMeasureNtf")
	proto.RegisterType((*NetStatisticsInfo)(nil), "kp_proto.NetStatisticsInfo")
	proto.RegisterType((*A2SNetStatisticsNtf)(nil), "kp_proto.A2SNetStatisticsNtf")
	proto.RegisterType((*KPMessage)(nil), "kp_proto.KPMessage")
	proto.RegisterEnum("kp_proto.KPProtoCmd", KPProtoCmd_name, KPProtoCmd_value)
	proto.RegisterEnum("kp_proto.KPErrorCode", KPErrorCode_name, KPErrorCode_value)
	proto.RegisterEnum("kp_proto.LinkNodeType", LinkNodeType_name, LinkNodeType_value)
}

func init() { proto.RegisterFile("kp_proto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x58, 0xdd, 0x6e, 0xe3, 0xc6,
	0x15, 0x8e, 0xfe, 0x6c, 0xe9, 0xe8, 0x67, 0x29, 0x3a, 0xf6, 0x72, 0x1d, 0xb4, 0x75, 0x14, 0x6c,
	0xe3, 0xb8, 0xa9, 0xb7, 0x60, 0x9f, 0x60, 0x6c, 0xd2, 0x35, 0x61, 0x89, 0x52, 0x39, 0xb4, 0x93,
	0x05, 0x0a, 0x0c, 0xb8, 0xe2, 0xc8, 0x26, 0x44, 0x89, 0x2c, 0x67, 0xe4, 0xae, 0x6e, 0x7a, 0xd9,
	0x07, 0x28, 0x7a, 0x91, 0x17, 0x69, 0x6f, 0x72, 0x57, 0xf4, 0xb6, 0xef, 0xd2, 0x27, 0x28, 0x8a,
	0x99, 0x91, 0x44, 0x59, 0x96, 0x93, 0xbd, 0x28, 0x90, 0xf5, 0x8d, 0x0d, 0x7e, 0xe7, 0xcc, 0x99,
	0xef, 0x7c, 0xdf, 0xe1, 0x70, 0x6c, 0x68, 0x8d, 0x53, 0x92, 0x66, 0x09, 0x4f, 0x4e, 0xe5, 0x4f,
	0xbd, 0xba, 0x7c, 0x3e, 0x3c, 0xba, 0x4d, 0x92, 0xdb, 0x98, 0xbe, 0x91, 0x4f, 0xef, 0x66, 0xa3,
	0x37, 0x21, 0x65, 0xc3, 0x2c, 0x4a, 0x79, 0x92, 0xa9, 0xdc, 0xce, 0x00, 0x5a, 0xc8, 0xc4, 0x1e,
	0xbd, 0x8d, 0x18, 0xa7, 0x99, 0x47, 0xff, 0xa8, 0xef, 0x43, 0x33, 0xb8, 0xa5, 0x53, 0x4e, 0xe2,
	0x64, 0x18, 0xc4, 0x51, 0x6a, 0x14, 0x8e, 0x8a, 0xc7, 0x35, 0xfd, 0x53, 0x68, 0x84, 0x77, 0x64,
	0x4c, 0xe7, 0x44, 0x46, 0x8d, 0xa2, 0x44, 0xdb, 0x50, 0x8b, 0x18, 0x99, 0x04, 0x62, 0xb1, 0x51,
	0x3a, 0x2a, 0x1e, 0x57, 0x3b, 0xff, 0x2d, 0x40, 0x0b, 0x9b, 0x28, 0x2f, 0xc9, 0xf4, 0xd7, 0xb0,
	0x93, 0x51, 0x36, 0x8b, 0xb9, 0xac, 0xd5, 0x32, 0xf7, 0x4f, 0x57, 0x8c, 0xaf, 0x06, 0x76, 0x96,
	0x25, 0xd9, 0x79, 0x12, 0x52, 0x5d, 0x83, 0x6a, 0x9a, 0x25, 0xef, 0xe7, 0x24, 0x0a, 0x17, 0xe5,
	0xf7, 0xa1, 0x79, 0x9f, 0x65, 0x29, 0xc9, 0x92, 0x19, 0xa7, 0x59, 0x14, 0xca, 0x2d, 0x2a, 0x82,
	0x8b, 0x84, 0x23, 0x3e, 0x9a, 0x06, 0x13, 0x6a, 0x94, 0x65, 0xb2, 0x0e, 0x30, 0x4e, 0x57, 0xac,
	0x2b, 0xcb, 0x02, 0xe3, 0x94, 0xdc, 0x47, 0x19, 0x9f, 0x05, 0x31, 0x89, 0x52, 0x63, 0x67, 0x09,
	0x2f, 0x9a, 0x61, 0x34, 0xbb, 0xa7, 0x99, 0xb1, 0xbb, 0xec, 0x31, 0x8e, 0xa6, 0x63, 0x32, 0x4d,
	0x42, 0x2a, 0x48, 0x54, 0x25, 0x7a, 0x0a, 0xad, 0x1c, 0xe5, 0xf3, 0x94, 0x1a, 0x35, 0xd9, 0xc5,
	0x41, 0xde, 0x45, 0x37, 0x9a, 0x8e, 0xdd, 0x24, 0xa4, 0xfe, 0x3c, 0xa5, 0x9d, 0xaf, 0xa1, 0xe5,
	0xd1, 0x20, 0xc6, 0xb2, 0xb2, 0x33, 0x1d, 0x25, 0x7a, 0x0b, 0x76, 0xfe, 0x44, 0xa3, 0xdb, 0x3b,
	0xd5, 0x7f, 0x45, 0x07, 0x28, 0x46, 0xa9, 0x6a, 0xb1, 0xf3, 0x9f, 0x02, 0xb4, 0xb1, 0x89, 0x50,
	0x18, 0x76, 0x85, 0x5e, 0x53, 0x65, 0xc2, 0xba, 0x14, 0x4a, 0xff, 0x17, 0xb0, 0xcb, 0x03, 0x36,
	0xfe, 0x51, 0x6d, 0xf6, 0xa0, 0x1e, 0x2f, 0x0a, 0x89, 0x5c, 0x25, 0xcd, 0x2b, 0x68, 0x4f, 0x29,
	0x57, 0x64, 0x87, 0x49, 0x4c, 0xa4, 0x6a, 0x2b, 0x85, 0x56, 0xf9, 0x69, 0x92, 0x71, 0xa9, 0x50,
	0x45, 0x18, 0xcb, 0x86, 0x77, 0x34, 0x9c, 0xc5, 0x2b, 0x75, 0x74, 0x80, 0x90, 0xc6, 0xc1, 0x9c,
	0xc4, 0x49, 0x92, 0x4a, 0x6d, 0x2a, 0xfa, 0x6f, 0xa1, 0xad, 0x78, 0x66, 0x34, 0x88, 0xd9, 0x7d,
	0x46, 0x62, 0xc6, 0x8d, 0xfa, 0x51, 0xe9, 0xb8, 0x6e, 0x1a, 0xb9, 0x3c, 0x0f, 0xe5, 0xe8, 0x7c,
	0x5f, 0x80, 0x36, 0x32, 0xf1, 0x83, 0x96, 0xd9, 0x4f, 0xdf, 0x72, 0x3e, 0xa5, 0xbb, 0x3f, 0x30,
	0xa5, 0x9d, 0xbf, 0x29, 0xc3, 0x2c, 0x1a, 0x7f, 0x4c, 0x86, 0x2d, 0x45, 0x7d, 0x40, 0xeb, 0xf9,
	0x88, 0xfa, 0xbd, 0x12, 0xb5, 0x97, 0x3c, 0xc7, 0xb7, 0x60, 0xa9, 0xfd, 0x03, 0xf6, 0xcf, 0x47,
	0xfb, 0x7f, 0x17, 0xc0, 0xc0, 0x26, 0x3a, 0x8b, 0xa6, 0x2b, 0xfa, 0xdf, 0x44, 0xfc, 0xce, 0xc3,
	0x1f, 0x85, 0x05, 0xbf, 0x81, 0x96, 0x3c, 0x5b, 0xe4, 0xf1, 0x21, 0x8f, 0x97, 0xdd, 0x1f, 0x39,
	0x5e, 0xfe, 0x59, 0x00, 0x03, 0x99, 0x78, 0x5b, 0x3f, 0xcf, 0xc7, 0x94, 0xbf, 0x17, 0xe0, 0x10,
	0x9b, 0xe8, 0x7a, 0xfa, 0xa8, 0x0d, 0xf6, 0x51, 0xd8, 0x72, 0xb0, 0xd5, 0x96, 0x5a, 0xe7, 0x5f,
	0x05, 0x38, 0x44, 0x26, 0xde, 0xc2, 0xfb, 0x59, 0xc9, 0xff, 0x67, 0xa8, 0x7a, 0x18, 0xf3, 0x80,
	0xcf, 0x98, 0x60, 0x98, 0x31, 0x55, 0x43, 0x7d, 0xbe, 0x9b, 0x50, 0xc9, 0x18, 0x59, 0x7e, 0xc1,
	0xb7, 0x93, 0x28, 0xc9, 0xd0, 0x56, 0xd2, 0x2d, 0xd8, 0x61, 0xb2, 0xb2, 0x64, 0x5a, 0x11, 0x27,
	0x0a, 0x8f, 0x26, 0x94, 0x30, 0x1e, 0x4c, 0xd4, 0x05, 0xa5, 0xd4, 0xa1, 0xf2, 0x40, 0x59, 0x52,
	0x70, 0x13, 0x1e, 0x8d, 0xe6, 0x5b, 0xc4, 0x7b, 0xa4, 0x55, 0x51, 0x56, 0xfc, 0x12, 0xea, 0x6a,
	0x07, 0x12, 0x4d, 0x47, 0x89, 0xe4, 0x52, 0x37, 0xf5, 0xb5, 0x17, 0x66, 0x51, 0xb7, 0x63, 0x42,
	0xed, 0x92, 0x06, 0x19, 0x3f, 0xa3, 0x01, 0xdf, 0xe0, 0x21, 0x36, 0x28, 0x89, 0x03, 0x70, 0x94,
	0x25, 0x13, 0x72, 0x97, 0xb0, 0xc5, 0x95, 0xaf, 0x73, 0x09, 0x0d, 0x79, 0xbd, 0x8b, 0x93, 0x20,
	0xdc, 0x3e, 0x8a, 0x4f, 0xb0, 0x5a, 0x73, 0x5a, 0xaa, 0xd3, 0xf9, 0x4b, 0x01, 0x1a, 0xf2, 0xf2,
	0xa9, 0x4a, 0xb1, 0x0f, 0x2f, 0x95, 0xbb, 0x58, 0xfa, 0xa1, 0x0b, 0xe5, 0x3e, 0x34, 0x47, 0x41,
	0x14, 0xd3, 0x50, 0x5c, 0x4f, 0x58, 0x32, 0x35, 0xca, 0x47, 0x85, 0x87, 0x23, 0x27, 0x67, 0xa5,
	0x33, 0x87, 0x7d, 0x64, 0x62, 0x97, 0x72, 0x9c, 0x52, 0x1a, 0xf6, 0x68, 0xc0, 0x66, 0x19, 0x75,
	0xf9, 0xe8, 0xc3, 0x09, 0x6d, 0xde, 0x1c, 0x95, 0xfd, 0x4d, 0xa8, 0x30, 0x51, 0x51, 0x1a, 0xbf,
	0x69, 0x74, 0x45, 0x1a, 0xfd, 0x5d, 0x11, 0xda, 0x62, 0x63, 0x1e, 0xf0, 0x88, 0xf1, 0x68, 0xc8,
	0x96, 0x17, 0xc6, 0xec, 0x7d, 0x3a, 0x1c, 0x33, 0xb9, 0x6b, 0x59, 0x3c, 0x73, 0xf5, 0x5c, 0x94,
	0xcf, 0x1a, 0x54, 0xc3, 0x2c, 0x49, 0x25, 0x52, 0x92, 0x88, 0x18, 0xd2, 0xf7, 0xef, 0xe6, 0x9c,
	0x32, 0xb9, 0x99, 0x04, 0xf8, 0x02, 0xa8, 0x48, 0xc0, 0x00, 0x8d, 0x0f, 0x53, 0x92, 0x06, 0x8c,
	0x45, 0xf7, 0x34, 0x49, 0xe9, 0x94, 0xc9, 0x61, 0x2b, 0x8b, 0x9e, 0x44, 0x64, 0x38, 0xcb, 0x32,
	0xca, 0x78, 0xf0, 0x4e, 0xbe, 0x1a, 0x65, 0x49, 0x77, 0x98, 0x92, 0x68, 0xca, 0xe8, 0x2d, 0x93,
	0x5f, 0xba, 0xb2, 0x18, 0x68, 0x81, 0x25, 0x33, 0x2e, 0xc1, 0x9a, 0x04, 0x0f, 0xa0, 0x35, 0x0b,
	0x45, 0x62, 0x18, 0xf0, 0x20, 0x0b, 0x26, 0xcc, 0x00, 0x89, 0xbf, 0x84, 0x17, 0x02, 0x4f, 0x66,
	0x7c, 0x15, 0xa8, 0xcb, 0x40, 0x1b, 0x6a, 0x0b, 0xb2, 0x84, 0x19, 0x8d, 0xa3, 0xe2, 0x71, 0x53,
	0x40, 0x7c, 0x05, 0x35, 0x05, 0xd4, 0xf9, 0xae, 0x00, 0x7b, 0x0b, 0x5b, 0x56, 0xea, 0xfc, 0x1f,
	0x4c, 0x39, 0x85, 0xda, 0x94, 0x72, 0x26, 0x4b, 0x4a, 0xad, 0xea, 0xe6, 0x67, 0xf9, 0xf8, 0x3c,
	0xf6, 0x62, 0x9b, 0x6b, 0x03, 0xa8, 0x5d, 0x0d, 0x7a, 0x94, 0xb1, 0xe0, 0x96, 0xea, 0x9f, 0x43,
	0x69, 0x38, 0x09, 0x17, 0x7f, 0xda, 0x7c, 0xba, 0x3e, 0x89, 0x03, 0xf1, 0xfb, 0x7c, 0x12, 0xea,
	0x47, 0x60, 0x88, 0xd3, 0x92, 0x4c, 0xd4, 0x12, 0x32, 0x09, 0x32, 0x76, 0x17, 0xc4, 0x42, 0x16,
	0xc9, 0xb5, 0x71, 0xf2, 0x8f, 0x32, 0xc0, 0xda, 0x82, 0x03, 0xd0, 0x6d, 0x82, 0x4c, 0x4c, 0x3c,
	0xfb, 0x77, 0x0e, 0xf6, 0x6d, 0x8f, 0x78, 0xf6, 0xef, 0xb5, 0x4f, 0x14, 0x8e, 0x4d, 0xb4, 0x8e,
	0x63, 0xad, 0xa0, 0x1f, 0xc2, 0x81, 0xc2, 0x91, 0x65, 0x91, 0xae, 0x88, 0xb8, 0x8b, 0x35, 0x45,
	0x15, 0x13, 0xb5, 0x36, 0x62, 0x58, 0x2b, 0xe5, 0xeb, 0x2c, 0xbb, 0xfb, 0x70, 0x5d, 0x39, 0x5f,
	0xb7, 0x11, 0xc3, 0x5a, 0x45, 0xff, 0x02, 0x7e, 0xa1, 0xd6, 0x9d, 0x39, 0xee, 0x5a, 0xd1, 0x6f,
	0x1c, 0xff, 0x92, 0x78, 0x58, 0x16, 0xd8, 0x51, 0x49, 0xa2, 0xc0, 0x53, 0x49, 0x58, 0xdb, 0xd5,
	0x5f, 0xc3, 0xe7, 0xaa, 0xd2, 0xb5, 0xfb, 0x74, 0xad, 0xaa, 0x4a, 0x13, 0xb5, 0x9e, 0x4e, 0xc3,
	0x5a, 0x2d, 0xe7, 0xec, 0x61, 0x82, 0x7d, 0xe4, 0x5f, 0x63, 0xe2, 0xf6, 0x7d, 0xe7, 0xe2, 0xad,
	0x06, 0xfa, 0x4b, 0xd8, 0x53, 0xb1, 0x4b, 0x1b, 0x79, 0xfe, 0x99, 0x8d, 0x7c, 0x59, 0xbb, 0xa1,
	0x02, 0x82, 0xc2, 0x7a, 0x00, 0x6b, 0xcd, 0x5c, 0xed, 0xab, 0x81, 0x67, 0x77, 0xfb, 0xc8, 0x92,
	0x0b, 0x5a, 0xb9, 0x3b, 0x6b, 0x38, 0xd6, 0x5e, 0xe8, 0x3f, 0x83, 0x57, 0x0a, 0x77, 0x6d, 0x1f,
	0x0f, 0x6c, 0xdb, 0xea, 0xd9, 0x08, 0x5f, 0x7b, 0x36, 0x71, 0xfd, 0x0b, 0x4d, 0xd3, 0x3f, 0x83,
	0x97, 0x79, 0xd8, 0x47, 0xbe, 0x83, 0x7d, 0xe7, 0x1c, 0xcb, 0x60, 0x3b, 0x77, 0xa2, 0xd7, 0xdf,
	0x70, 0x50, 0xcf, 0xbb, 0xda, 0x88, 0x61, 0x6d, 0xef, 0xe4, 0xaf, 0x65, 0xa8, 0xaf, 0x9f, 0x79,
	0x2d, 0x00, 0x9b, 0x5c, 0x0d, 0x6c, 0xcf, 0x23, 0xfd, 0x2b, 0xed, 0x13, 0xbd, 0x03, 0x3f, 0x5f,
	0x3e, 0x5f, 0x20, 0xa7, 0x6b, 0x5b, 0x64, 0xe0, 0xf5, 0xbf, 0x7d, 0xeb, 0x58, 0xc4, 0x71, 0x6f,
	0x50, 0xd7, 0xb1, 0xb4, 0x82, 0xfe, 0x25, 0x7c, 0xb1, 0x91, 0x73, 0xe3, 0x79, 0x03, 0xaf, 0x7f,
	0xed, 0xdb, 0xde, 0x5a, 0x62, 0x51, 0x3f, 0x85, 0x93, 0x8d, 0x44, 0x64, 0x59, 0x37, 0x8e, 0xe7,
	0x5f, 0xa3, 0x2e, 0xbe, 0xf1, 0x08, 0xea, 0x7a, 0x36, 0xb2, 0xde, 0xda, 0xdf, 0x3a, 0xd8, 0x17,
	0xe3, 0x75, 0x02, 0xbf, 0xdc, 0xc8, 0xb7, 0xec, 0xee, 0x5a, 0xbe, 0xdb, 0xf7, 0x17, 0xb9, 0x65,
	0xfd, 0xd7, 0xf0, 0xd5, 0x46, 0xae, 0x30, 0xda, 0xc3, 0x24, 0xcf, 0xcf, 0xd3, 0x2b, 0xfa, 0x1b,
	0xf8, 0xd5, 0x46, 0xba, 0x9a, 0x8c, 0x27, 0x16, 0xec, 0xe8, 0xaf, 0x60, 0x7f, 0x63, 0x81, 0xf2,
	0x4e, 0xdb, 0x55, 0xbe, 0x3d, 0x08, 0x39, 0x2e, 0x76, 0x2c, 0xdb, 0xf3, 0xfa, 0x9e, 0x56, 0xd5,
	0xbf, 0x86, 0xe3, 0x47, 0x2b, 0x17, 0x6f, 0x5f, 0xb7, 0x7f, 0x8e, 0xba, 0xce, 0x20, 0xdf, 0xa7,
	0xa6, 0x7f, 0x05, 0xaf, 0x9f, 0xca, 0xb6, 0x90, 0x8f, 0xce, 0x10, 0xb6, 0x55, 0x61, 0x50, 0x2f,
	0xc8, 0x46, 0x0f, 0x3d, 0xe4, 0xe1, 0x4b, 0xd4, 0xb5, 0x15, 0xa0, 0xd5, 0x75, 0x13, 0x4e, 0x37,
	0x92, 0x7a, 0x7d, 0x6b, 0x35, 0x04, 0xdb, 0x7a, 0x6d, 0x9c, 0xfc, 0x01, 0x1a, 0xeb, 0xff, 0x92,
	0x50, 0x13, 0xde, 0x75, 0xdc, 0x2b, 0xb7, 0x6f, 0xd9, 0xe4, 0xc2, 0xeb, 0xbb, 0xbe, 0xed, 0x5a,
	0xcb, 0xf3, 0x64, 0x15, 0x38, 0x43, 0xe7, 0x57, 0x02, 0x2f, 0xa8, 0x51, 0x5d, 0xe1, 0x8e, 0xeb,
	0xdb, 0x5e, 0xcf, 0xb6, 0x1c, 0xe4, 0xdb, 0x5a, 0xf1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8,
	0x5a, 0x22, 0x61, 0x70, 0x12, 0x00, 0x00,
}
